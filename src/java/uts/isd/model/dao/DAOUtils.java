package uts.isd.model.dao;

import java.sql.*;

public class DAOUtils {
    private static final Connection dbConnection = DBConnector.getConnection();

    /**
     * Returns a PreparedStatement of the given connection, set with the given SQL query and the
     * given parameter values.
     *
     * @param sql                 The SQL query to construct the PreparedStatement with.
     * @param returnGeneratedKeys Set whether to return generated keys or not.
     * @param values              The parameter values to be set in the created PreparedStatement.
     * @throws SQLException If something fails during creating the PreparedStatement.
     */
    public static PreparedStatement prepareStatement
    (String sql, boolean returnGeneratedKeys, Object... values) throws SQLException {
        PreparedStatement st = dbConnection.prepareStatement(sql,
                returnGeneratedKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS);

        for (int i = 0; i < values.length; i++) {
            st.setObject(i + 1, values[i]);
        }

        return st;
    }

    /**
     * Returns the generated Primary Key ID from running an SQL insert query.
     *
     * @param statement The PreparedStatement used to perform the SQL insertion.
     * @return The ID generated by the SQL insert query.
     * @throws SQLException If no keys were generated.
     */
    public static int getGeneratedID(PreparedStatement statement) throws SQLException {
        ResultSet generatedKeysRs = statement.getGeneratedKeys();

        // Move cursor to the generated key row
        // If no key generated, throw SQL Exception
        if (!generatedKeysRs.next())
            throw new SQLException("No generated key.");

        return generatedKeysRs.getInt(1);
    }

    /**
     * Converts the given java.util.Date to java.sql.Date.
     *
     * @param date The java.util.Date to be converted to java.sql.Date.
     * @return The converted java.sql.Date.
     */
    public static Date toSqlDate(java.util.Date date) {
        return (date != null) ? new Date(date.getTime()) : null;
    }
}