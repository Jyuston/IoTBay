package uts.isd.model.dao;

import uts.isd.model.Account;

import java.sql.*;


public class AccountDAO {

    private static Connection dbConnection = DBConnector.getConnection();
    /**
     * Used to determine the type of a specified account.
     * Useful when trying to log the user in as either a Customer or Staff.
     *
     * @param email Email of Account
     * @param password Password of Account
     * @return Character representing the account type. Either 'C' or 'S'.
     * @throws SQLException When db access cannot be established.
     * @throws DAOException When account cannot be found.
     */
    public static char getAccountType(String email, String password) throws SQLException, DAOException {
        String accountTypeQuery =
                "SELECT ACCOUNT_TYPE FROM ACCOUNTS " +
                "WHERE EMAIL LIKE ? AND PASSWORD LIKE ?";

        PreparedStatement accountTypeSt = DAOUtils.prepareStatement(accountTypeQuery, false, email, password);
        ResultSet accountTypeRs = accountTypeSt.executeQuery();

        if (!accountTypeRs.next())
            throw new DAOException("No Account found. Incorrect Email or Password.");

        return accountTypeRs.getString("ACCOUNT_TYPE").charAt(0);
    }

    /**
     * Saves Account information to the database, creating a new row.
     * Returns the auto-generated primary key ID of the new account.
     * Use a try catch with DAOException to catch and display errors to the user.
     *
     * @param account The Account to save to the database.
     * @return The auto-generated ID of the new account.
     * @throws SQLException When db access cannot be established.
     * @throws DAOException When account creation fails.
     */
    public static int save(Account account) throws SQLException, DAOException {
        String query =
                "INSERT INTO ACCOUNTS (EMAIL, F_NAME, L_NAME, CONTACT_NUMBER, ACCOUNT_TYPE, PASSWORD, IS_ACTIVE) " +
                "VALUES (?, ?, ?, ?, ?, ?, ?)";

        PreparedStatement accountInsertSt = DAOUtils.prepareStatement(query, true,
                account.getEmail(),
                account.getFirstName(),
                account.getLastName(),
                account.getContactNumber(),
                String.valueOf(account.getAccountType()),
                account.getPassword(),
                account.isActive()
        );

        int rowsChanged = accountInsertSt.executeUpdate();
        if (rowsChanged == 0)
            throw new DAOException("Account creation failed. Please try again.");

        // Return Auto ID that was generated by SQL Server
        return DAOUtils.getGeneratedID(accountInsertSt);
    } 
    
    public static Account getAccount(String firstName, String lastName, String contactNumber) throws SQLException{
        Statement st = dbConnection.createStatement();
        String getAccountDataQuery = 
                "SELECT ID, ACCOUNT_TYPE FROM ACCOUNTS " +
                "WHERE F_NAME LIKE '" + firstName + "' " +
                "AND L_NAME LIKE '" + lastName + "' " + 
                "AND CONTACT_NUMBER LIKE '" + contactNumber + "'";
        
        ResultSet accountRs = st.executeQuery(getAccountDataQuery);
        if (!accountRs.next()) throw new DAOException("Account not found. Please try again.");
        
        if ((accountRs.getString("ACCOUNT_TYPE").charAt(0)) == 'C'){;
            return CustomerDAO.get(accountRs.getInt("ID"));
        } 
        else if ((accountRs.getString("ACCOUNT_TYPE").charAt(0)) == 'S'){
            return StaffDAO.get(accountRs.getInt("ID"));
        }
        return null;  
    }
    
    public static void delete(String ID) throws SQLException, DAOException{
        String deleteQuery = "DELETE FROM ACCOUNTS WHERE ID = " + ID;
        
        PreparedStatement st = DAOUtils.prepareStatement(deleteQuery, false);
        
        int rowsChanged = st.executeUpdate();
        if (rowsChanged == 0) {throw new DAOException("Failed to delete Product. Please try again.");}
    }
    
}
