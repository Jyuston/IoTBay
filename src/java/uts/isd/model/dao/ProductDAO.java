package uts.isd.model.dao;

import uts.isd.model.Product;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;

public class ProductDAO {
    public static final Connection dbConnection = DBConnector.getConnection();

    /**
     * Find a single Product by Product ID.
     * @return An instantiated Product if found, otherwise null.
     */
    public static Product get(int productID) throws SQLException {
        Statement st = dbConnection.createStatement();
        String getProductData =
                "SELECT * FROM PRODUCTS " +
                "WHERE ID = " + productID;

        ResultSet productRs = st.executeQuery(getProductData);

        // If no data, return null Product
        if (!productRs.next())
            return null;

        return createProductObject(productRs);
    }

    /**
     * Find a single Product by exact name and category.
     * @return An instantiated Product if found, otherwise null.
     */
    public static Product get(String name, String category) throws SQLException {
        Statement st = dbConnection.createStatement();
        String getProductID =
                "SELECT * FROM PRODUCTS " +
                "WHERE NAME LIKE '%" + name + "%' " +
                "AND CATEGORY LIKE '" + category + "'";

        ResultSet productRs = st.executeQuery(getProductID);

        // If no data, return null Product
        if (!productRs.next())
            return null;

        return createProductObject(productRs);
    }

    /**
     * Find all products within the database.
     * @return A list of all products within the database
     */
    public static LinkedList<Product> getAll() throws SQLException {
        LinkedList<Product> products = new LinkedList<>();

        Statement st = dbConnection.createStatement();
        String getProductsQuery = "SELECT * FROM PRODUCTS ";

        ResultSet productsRs = st.executeQuery(getProductsQuery);

        while (productsRs.next())
            products.add(createProductObject(productsRs));

        return products;
    }

    /**
     * Search for a list of products by name.
     * @param query The product name to search
     * @return A list of products with names matching the search
     */
    public static LinkedList<Product> searchByName(String query) throws SQLException {
        String searchQuery =
                "SELECT * FROM PRODUCTS " +
                "WHERE NAME LIKE '%" + query + "%'";

        return search(searchQuery);
    }

    /**
     * Search for a list of products by the category they belong to.
     * @param query The product category to search
     * @return A list of products that belong to a category
     */
    public static LinkedList<Product> searchByCategory(String query) throws SQLException {
        String searchQuery =
                "SELECT * FROM PRODUCTS " +
                "WHERE CATEGORY LIKE '" + query + "'";

        return search(searchQuery);
    }

    /**
     * Save a new product to the database.
     * New products can be created by instantiating a new model instance.
     * @param product Product to save to DB
     * @return Whether or not the write was successful
     */
    public static boolean save(Product product) throws SQLException {
        PreparedStatement productInsertSt = dbConnection.prepareStatement(
                "INSERT INTO PRODUCTS (CATEGORY, NAME, DESCRIPTION, STOCK, PRICE, ARCHIVED) " +
                "VALUES (?, ?, ?, ?, ?, ?)",
                Statement.RETURN_GENERATED_KEYS
        );

        productInsertSt.setString(1, product.getCategory());
        productInsertSt.setString(1, product.getName());
        productInsertSt.setString(1, product.getDescription());
        productInsertSt.setInt(1, product.getStock());
        productInsertSt.setDouble(1, product.getPrice());
        productInsertSt.setBoolean(1, product.isArchived());

        productInsertSt.executeUpdate();

        // Return Auto ID that was generated by SQL Server
        ResultSet generatedKeysRs = productInsertSt.getGeneratedKeys();

        // If no generated ID i.e. No Product saved to DB
        if (!generatedKeysRs.next())
            return false;

        // Get generated ID
        int generatedID = generatedKeysRs.getInt(1);

        // Update instances ID and return true for successful write
        product.setID(generatedID);
        return true;
    }

    /**
     * Update a single product from the database.
     * @param product The instantiated product to update. Must have an ID.
     * @return Returns whether or not the update action was successful.
     */
    public static boolean update(Product product, String[] params) throws SQLException {
         PreparedStatement updateSt = dbConnection.prepareStatement(
                "UPDATE PRODUCTS SET NAME = ?,STOCK = ?, PRICE = ?, CATEGORY = ?,DESCRIPTION = ?, ARCHIVED = ? " +
                "WHERE ID = " + product.getID()
         );

        updateSt.setString(1, product.getName());
        updateSt.setInt(2, product.getStock());
        updateSt.setDouble(3,  product.getPrice());
        updateSt.setString(4, product.getCategory());
        updateSt.setString(5, product.getDescription());
        updateSt.setBoolean(6, product.isArchived());

        int rowsChanged = updateSt.executeUpdate();

        return rowsChanged > 0;
    }

    /**
     * Delete a single product from the database.
     * @param productID ID of the product to delete
     * @return Returns whether or not the delete action was successful.
     */
    public boolean deleteProduct(String productID) throws SQLException {
        String deleteQuery = "DELETE FROM PRODUCTS WHERE ID = " + productID;

        Statement st = dbConnection.createStatement();
        int rowsChanged = st.executeUpdate(deleteQuery);

        return rowsChanged > 0;
    }

    // Helpers

    /**
     * Used to create Product instances from SQL ResultSets after executing a db query.
     *
     * Will create the Product instance based on the current cursor position of the ResultSet.
     * This means this helper method can be used within loops.
     * @param productRs the ResultSet of the Product(s)
     * @return An instantiated Product object
     */
    private static Product createProductObject(ResultSet productRs) throws SQLException {
        return new Product(
                productRs.getInt("ID"),
                productRs.getString("NAME"),
                productRs.getString("CATEGORY"),
                productRs.getString("DESCRIPTION"),
                productRs.getInt("STOCK"),
                productRs.getDouble("PRICE"),
                productRs.getBoolean("ARCHIVED")
        );
    }

    /**
     * Similar functionality that is re-used within search methods
     * @param sqlQuery The search query performed
     * @return A list of products created from the returned db rows
     */
    private static LinkedList<Product> search(String sqlQuery) throws SQLException {
        LinkedList<Product> filteredProducts = new LinkedList<>();

        Statement st = dbConnection.createStatement();
        ResultSet productsRs = st.executeQuery(sqlQuery);

        while (productsRs.next()) {
            filteredProducts.add(createProductObject(productsRs));
        }

        return filteredProducts;
    }
}
